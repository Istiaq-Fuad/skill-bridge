services:
  # PostgreSQL Database
  skillbridge-db:
    image: postgres:15
    container_name: skillbridge-db
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - skillbridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: skillbridge-backend
    restart: unless-stopped
    env_file: .env
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      DB_HOST: skillbridge-db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      # JPA configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_JPA_SHOW_SQL: ${SPRING_JPA_SHOW_SQL}
      SPRING_JPA_FORMAT_SQL: ${SPRING_JPA_FORMAT_SQL}

      # Server configuration
      SERVER_PORT: ${SERVER_PORT}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}

      # CORS configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    depends_on:
      skillbridge-db:
        condition: service_healthy
    networks:
      - skillbridge-network

  # Next.js Frontend
  frontend:
    build:
      context: ./skillbridge-frontend
      dockerfile: Dockerfile
    container_name: skillbridge-frontend
    restart: unless-stopped
    env_file: .env
    ports:
      - "3000:3000"
    environment:
      # Backend API URL
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: ${NODE_ENV}
    networks:
      - skillbridge-network

volumes:
  postgres-data:
    driver: local

networks:
  skillbridge-network:
    driver: bridge
